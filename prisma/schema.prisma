generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EmployeeType {
  PERMANENT
  CONTRACT
  INTERN
  CONSULTANT
  PART_TIME
  TEMPORARY
}

enum EmployeeRole {
  EMPLOYEE
  HR
  MANAGER
  ACCOUNTANT
  SR_MANAGER
  TEAM_LEAD
  SUPERVISOR
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Industry {
  TECHNOLOGY
  HEALTHCARE
  FINANCE
  EDUCATION
  MANUFACTURING
  RETAIL
  CONSTRUCTION
  HOSPITALITY
  TRANSPORTATION
  AGRICULTURE
  REAL_ESTATE
  MEDIA
  CONSULTING
  OTHER
}

model Company {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  industry  Industry
  address   String
  stateId   Int
  cityId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  state         State          @relation(fields: [stateId], references: [id])
  city          City           @relation(fields: [cityId], references: [id])
  admin         Admin?
  employees     Employee[]
  departments   Department[]
  designations  Designation[]
  payParameters PayParameter[]
  payMasters    PayMaster[]

  @@map("companies")
}

model Admin {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  password     String
  mobile       String   @unique
  companyId    Int      @unique // One-to-One relationship
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("admins")
}

model Employee {
  id           Int          @id @default(autoincrement())
  employeeCode String       @unique
  name         String
  email        String       @unique
  mobileNo     String       @unique
  password     String
  salary       Float
  gender       Gender // Using enum
  dob          DateTime
  address1     String
  address2     String?
  type         EmployeeType // Using enum
  role         EmployeeRole @default(EMPLOYEE) // Using enum
  profilePic   String
  accountNo    String
  pfAccountNo  String
  isActive     Boolean      @default(true)
  refreshToken String?
  joinedAt     DateTime     @default(now())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  companyId     Int
  departmentId  Int
  designationId Int
  bankCodeId    Int
  stateId       Int
  cityId        Int

  company     Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  department  Department  @relation(fields: [departmentId], references: [id])
  designation Designation @relation(fields: [designationId], references: [id])
  bankCode    BankCode    @relation(fields: [bankCodeId], references: [id])
  state       State       @relation(fields: [stateId], references: [id])
  city        City        @relation(fields: [cityId], references: [id])
  payMasters  PayMaster[]

  @@map("employees")
}

model Department {
  id          Int      @id @default(autoincrement())
  name        String
  code        String?
  description String?
  companyId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company       Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  employees     Employee[]
  payParameters PayParameter[]

  @@unique([name, companyId])
  @@map("departments")
}

model Designation {
  id          Int      @id @default(autoincrement())
  name        String
  code        String?
  description String?
  level       String?
  companyId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company       Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  employees     Employee[]
  payParameters PayParameter[]

  @@unique([name, companyId])
  @@map("designations")
}

model PayParameter {
  id                  Int          @id @default(autoincrement())
  companyId           Int
  departmentId        Int? // Optional
  designationId       Int? // Optional  
  employeeType        EmployeeType // Using enum
  da                  Float        @default(0)
  ta                  Float        @default(0)
  hra                 Float        @default(0)
  spall               Float        @default(0)
  medicalAllRate      Float        @default(0)
  medicalAllFixed     Float        @default(0)
  epfRate             Float        @default(12.0)
  esiRate             Float        @default(0.75)
  tdsRate             Float        @default(0)
  professionalTaxRate Float        @default(0)
  esiSalaryLimit      Float        @default(25000)
  epfSalaryLimit      Float        @default(15000)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  department  Department?  @relation(fields: [departmentId], references: [id])
  designation Designation? @relation(fields: [designationId], references: [id])

  @@unique([companyId, employeeType])
  @@map("pay_parameters")
}

model PayMaster {
  id              Int      @id @default(autoincrement())
  employeeId      Int
  companyId       Int
  month           Int
  year            Int
  basicSalary     Float
  da              Float
  ta              Float
  hra             Float
  spall           Float
  medicalAll      Float
  otherAll        Float    @default(0)
  grossSalary     Float
  epf             Float
  esi             Float
  tds             Float
  professionalTax Float
  otherDeductions Float    @default(0)
  totalDeductions Float
  netSalary       Float
  remarks         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  company  Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([employeeId, month, year])
  @@map("pay_masters")
}

model State {
  id        Int      @id @default(autoincrement())
  stateName String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cities    City[]
  companies Company[]
  employees Employee[]

  @@map("states")
}

model City {
  id        Int      @id @default(autoincrement())
  cityName  String
  stateId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  state     State      @relation(fields: [stateId], references: [id], onDelete: Cascade)
  companies Company[]
  employees Employee[]

  @@unique([cityName, stateId])
  @@map("cities")
}

model BankCode {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employees Employee[]

  @@map("bank_codes")
}
