generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Enums ---
enum EmployeeType {
  PERMANENT
  CONTRACT
  INTERN
  CONSULTANT
  PART_TIME
  TEMPORARY
}

enum EmployeeRole {
  EMPLOYEE
  HR
  MANAGER
  ACCOUNTANT
  SR_MANAGER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Industry {
  TECHNOLOGY
  HEALTHCARE
  FINANCE
  EDUCATION
  MANUFACTURING
  RETAIL
  CONSTRUCTION
  HOSPITALITY
  TRANSPORTATION
  AGRICULTURE
  REAL_ESTATE
  MEDIA
  CONSULTING
  OTHER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  HALF_DAY
  LEAVE
  WEEK_OFF
  HOLIDAY
  LATE
  EARLY_LEAVE
}

enum LeaveApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum ComplainStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  REJECTED
}

// --- Models ---

model Company {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  industry    Industry
  address     String
  countryName String
  stateName   String
  cityName    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  admin             Admin?
  employees         Employee[]
  departments       Department[]
  designations      Designation[]
  payParameters     PayParameter[]
  payMasters        PayMaster[]
  attendancePlans   AttendancePlan[]
  leavePolicies     LeavePolicy[]
  holidays          Holiday[]
  notifications     Notification[]
  complains         Complain[]
  leaveApplications LeaveApplication[]
  attendances       Attendance[]
}

model Admin {
  id              Int       @id @default(autoincrement())
  name            String
  email           String    @unique
  password        String
  countryCode     String
  mobileNo        String
  companyId       Int       @unique
  refreshToken    String?
  otp             String?
  otpExpiry       DateTime?
  isOtpVerified   Boolean   @default(false)
  otpAttempts     Int       @default(0)
  otpBlockedUntil DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([countryCode, mobileNo])
}

model Employee {
  id              Int          @id @default(autoincrement())
  employeeCode    String       @unique
  name            String
  email           String       @unique
  countryCode     String
  mobileNo        String
  password        String
  salary          Float
  gender          Gender
  dob             DateTime
  address1        String
  address2        String?
  type            EmployeeType
  role            EmployeeRole @default(EMPLOYEE)
  profilePic      String?
  accountNo       String
  pfAccountNo     String?
  isActive        Boolean      @default(true)
  refreshToken    String?
  otp             String?
  otpExpiry       DateTime?
  isOtpVerified   Boolean      @default(false)
  otpAttempts     Int          @default(0)
  otpBlockedUntil DateTime?
  joinedAt        DateTime     @default(now())
  leftAt          DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  companyId        Int
  departmentId     Int
  designationId    Int
  bankCode         String
  countryName      String
  stateName        String
  cityName         String
  attendancePlanId Int?

  company             Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  department          Department         @relation(fields: [departmentId], references: [id])
  designation         Designation        @relation(fields: [designationId], references: [id])
  payMasters          PayMaster[]
  attendances         Attendance[]
  leaveApplications   LeaveApplication[]
  approvedLeaves      LeaveApplication[] @relation("LeaveApprover")
  notifications       Notification[]
  complains           Complain[]
  attendancePlan      AttendancePlan?    @relation(fields: [attendancePlanId], references: [id])
  approvedAttendances Attendance[]       @relation("AttendanceApprover")

  @@unique([countryCode, mobileNo])
}

model Department {
  id          Int      @id @default(autoincrement())
  name        String
  code        String?
  description String?
  companyId   Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  employees    Employee[]
  designations Designation[]

  @@unique([name, companyId])
}

model Designation {
  id           Int      @id @default(autoincrement())
  name         String
  code         String?
  description  String?
  level        String?
  companyId    Int
  departmentId Int
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  company    Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  employees  Employee[]

  @@unique([name, departmentId, companyId])
}

model PayParameter {
  id                       Int          @id @default(autoincrement())
  companyId                Int
  employeeType             EmployeeType
  effectiveDate            DateTime     @default(now())
  da                       Float        @default(0)
  ta                       Float        @default(0)
  hra                      Float        @default(0)
  spall                    Float        @default(0)
  medicalAllRate           Float        @default(0)
  medicalAllFixed          Float        @default(0)
  epfRate                  Float        @default(12.0)
  esiRate                  Float        @default(0.75)
  tdsRate                  Float        @default(0)
  professionalTaxRate      Float        @default(0)
  esiSalaryLimit           Float        @default(25000)
  epfSalaryLimit           Float        @default(15000)
  paidLeavePerMonth        Float        @default(1.0)
  unpaidLeavePenaltyPerDay Float        @default(0)
  createdAt                DateTime     @default(now())
  updatedAt                DateTime     @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, employeeType, effectiveDate])
}

model PayMaster {
  id                   Int       @id @default(autoincrement())
  employeeId           Int
  companyId            Int
  month                Int
  year                 Int
  da                   Float
  ta                   Float
  hra                  Float
  spall                Float
  medicalAll           Float
  otherAll             Float     @default(0)
  grossSalary          Float
  totalPaidLeaves      Float     @default(0)
  totalUnpaidLeaves    Float     @default(0)
  unpaidLeaveDeduction Float     @default(0)
  epf                  Float
  esi                  Float
  tds                  Float
  professionalTax      Float
  otherDeductions      Float     @default(0)
  totalDeductions      Float
  netSalary            Float
  remarks              String?
  isProcessed          Boolean   @default(false)
  processedAt          DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  company  Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([employeeId, month, year])
}

model AttendancePlan {
  id              Int      @id @default(autoincrement())
  companyId       Int
  name            String
  description     String?
  workingHours    Float    @default(8.0)
  allowedLateMins Int      @default(0)
  allowEarlyLeave Boolean  @default(false)
  gracePeriodMins Int      @default(0)
  requirePunchOut Boolean  @default(true)
  isDefault       Boolean  @default(false)
  shiftStartTime  String   @default("09:00")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  employees Employee[]

  @@unique([companyId, name])
}

model Attendance {
  id           Int              @id @default(autoincrement())
  employeeId   Int
  companyId    Int
  date         DateTime         @db.Date
  status       AttendanceStatus
  inTime       DateTime?
  outTime      DateTime?
  totalHours   Float?
  isApproved   Boolean          @default(false)
  approvedById Int?
  remarks      String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  employee   Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  company    Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  approvedBy Employee? @relation("AttendanceApprover", fields: [approvedById], references: [id])

  @@unique([employeeId, date])
}

model Holiday {
  id                Int      @id @default(autoincrement())
  companyId         Int
  date              DateTime @db.Date
  name              String
  isCompanySpecific Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model LeavePolicy {
  id                  Int      @id @default(autoincrement())
  companyId           Int
  leaveType           String
  daysAllowed         Float
  carryForward        Boolean  @default(false)
  maxCarryForwardDays Float?
  isPaid              Boolean  @default(true)
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  company           Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  leaveApplications LeaveApplication[]
}

model LeaveApplication {
  id            Int                    @id @default(autoincrement())
  employeeId    Int
  companyId     Int
  leavePolicyId Int
  fromDate      DateTime               @db.Date
  toDate        DateTime               @db.Date
  reason        String
  status        LeaveApplicationStatus @default(PENDING)
  appliedAt     DateTime               @default(now())
  approvedById  Int?
  remarks       String?
  isHalfDay     Boolean                @default(false)
  session       String?

  employee    Employee    @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  leavePolicy LeavePolicy @relation(fields: [leavePolicyId], references: [id])
  approvedBy  Employee?   @relation("LeaveApprover", fields: [approvedById], references: [id])
  company     Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Notification {
  id         Int      @id @default(autoincrement())
  employeeId Int?
  companyId  Int?
  type       String
  message    String
  link       String?
  seen       Boolean  @default(false)
  createdAt  DateTime @default(now())

  employee Employee? @relation(fields: [employeeId], references: [id])
  company  Company?  @relation(fields: [companyId], references: [id])
}

model Complain {
  id          Int            @id @default(autoincrement())
  employeeId  Int
  companyId   Int
  subject     String
  description String
  status      ComplainStatus @default(PENDING)
  remarks     String?
  raisedAt    DateTime       @default(now())
  updatedAt   DateTime       @default(now())

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  company  Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}
